"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _path = _interopRequireDefault(require("path"));

var _slash = _interopRequireDefault(require("slash"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(_ref) {
    var config, templates, routes, paths, route404, id404, productionImports, developmentImports, productionTemplates, developmentTemplates, file, dynamicRoutesPath;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            config = _ref.config;
            templates = config.templates, routes = config.routes, paths = config.paths;
            route404 = routes.find(function (route) {
              return route.path === '404';
            });
            id404 = route404.templateID;
            productionImports = "\nimport universal, { setHasBabelPlugin } from 'react-universal-component'\n  ";
            developmentImports = '';
            productionTemplates = "\n\nconst universalOptions = {\n  loading: () => null,\n  error: props => {\n    console.error(props.error);\n    return <div>An error occurred loading this page's template. More information is available in the console.</div>;\n  },\n}\n\n".concat(templates.map(function (template, index) {
              var templatePath = _path.default.relative(paths.DIST, _path.default.resolve(paths.ROOT, template));

              return "const t_".concat(index, " = universal(import('").concat((0, _slash.default)(templatePath), "'), universalOptions)");
            }).join('\n'), "\n");
            developmentTemplates = templates.map(function (template, index) {
              var templatePath = _path.default.relative(paths.DIST, _path.default.resolve(paths.ROOT, template));

              return "import t_".concat(index, " from '").concat((0, _slash.default)(templatePath), "'");
            }).join('\n');
            file = "\nimport React, { Component } from 'react'\nimport { Route } from 'react-router-dom'\nimport { cleanPath } from 'react-static'\n".concat(process.env.NODE_ENV === 'production' ? productionImports : developmentImports, "\n\n").concat(process.env.NODE_ENV === 'production' ? productionTemplates : developmentTemplates, "\n\n// Template Map\nglobal.componentsByTemplateID = global.componentsByTemplateID || [\n  ").concat(templates.map(function (template, index) {
              return "t_".concat(index);
            }).join(',\n'), "\n]\n\nconst defaultTemplateIDs = {\n  '404': ").concat(id404, "\n}\n\n// Template Tree\nglobal.templateIDsByPath = global.templateIDsByPath || defaultTemplateIDs\n\n// Get template for given path\nconst getComponentForPath = path => {\n  path = cleanPath(path)\n  return global.componentsByTemplateID[global.templateIDsByPath[path]]\n}\n\nglobal.reactStaticGetComponentForPath = getComponentForPath\nglobal.reactStaticRegisterTemplateIDForPath = (path, id) => {\n  global.templateIDsByPath[path] = id\n}\nglobal.clearTemplateIDs = () => {\n  global.templateIDsByPath = defaultTemplateIDs\n}\n\nexport default class Routes extends Component {\n  componentDidMount () {\n    global.clearTemplateIDs = () => {\n      this.setState({})\n    }\n    ").concat(process.env.NODE_ENV !== 'production' ? "\n    if (typeof document !== 'undefined' && module.hot) {\n      ".concat(templates.map(function (template, index) {
              var templatePath = _path.default.relative(paths.DIST, _path.default.resolve(paths.ROOT, template));

              return "module.hot.accept('".concat((0, _slash.default)(templatePath), "', () => {\n            global.componentsByTemplateID[").concat(index, "] = require('").concat((0, _slash.default)(templatePath), "').default\n            this.forceUpdate()\n          })");
            }).join('\n'), "\n      }\n") : '', "\n\n  }\n  render () {\n    const { component: Comp, render, children } = this.props\n\n    const getFullComponentForPath = path => {\n      let Comp = getComponentForPath(path)\n      let is404 = path === '404'\n      if (!Comp) {\n        is404 = true\n        Comp = getComponentForPath('/404')\n      }\n      return (newProps = {}) => (\n        Comp\n          ? <Comp {...newProps} {...(is404 ? {path: '404'} : {})} />\n          : null\n      )\n    }\n\n    const renderProps = {\n      componentsByTemplateID: global.componentsByTemplateID,\n      templateIDsByPath: global.templateIDsByPath,\n      getComponentForPath: getFullComponentForPath\n    }\n\n    if (Comp) {\n      return (\n        <Comp\n          {...renderProps}\n        />\n      )\n    }\n\n    if (render || children) {\n      return (render || children)(renderProps)\n    }\n\n    // This is the default auto-routing renderer\n    return (\n      <Route render={props => {\n        let Comp = getFullComponentForPath(props.location.pathname)\n        // If Comp is used as a component here, it triggers React to re-mount the entire\n        // component tree underneath during reconciliation, losing all internal state.\n        // By unwrapping it here we keep the real, static component exposed directly to React.\n        return Comp && Comp()\n      }} />\n    )\n  }\n}\n\n");
            dynamicRoutesPath = _path.default.join(paths.DIST, 'react-static-routes.js');
            _context.next = 12;
            return _fsExtra.default.remove(dynamicRoutesPath);

          case 12:
            _context.next = 14;
            return _fsExtra.default.outputFile(dynamicRoutesPath, file);

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdGF0aWMvZ2VuZXJhdGVSb3V0ZXMuanMiXSwibmFtZXMiOlsiY29uZmlnIiwidGVtcGxhdGVzIiwicm91dGVzIiwicGF0aHMiLCJyb3V0ZTQwNCIsImZpbmQiLCJyb3V0ZSIsInBhdGgiLCJpZDQwNCIsInRlbXBsYXRlSUQiLCJwcm9kdWN0aW9uSW1wb3J0cyIsImRldmVsb3BtZW50SW1wb3J0cyIsInByb2R1Y3Rpb25UZW1wbGF0ZXMiLCJtYXAiLCJ0ZW1wbGF0ZSIsImluZGV4IiwidGVtcGxhdGVQYXRoIiwicmVsYXRpdmUiLCJESVNUIiwicmVzb2x2ZSIsIlJPT1QiLCJqb2luIiwiZGV2ZWxvcG1lbnRUZW1wbGF0ZXMiLCJmaWxlIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiZHluYW1pY1JvdXRlc1BhdGgiLCJmcyIsInJlbW92ZSIsIm91dHB1dEZpbGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7Ozs7Ozs7Ozs7OzRCQUVlO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFTQSxZQUFBQSxNQUFULFFBQVNBLE1BQVQ7QUFDTEMsWUFBQUEsU0FESyxHQUN3QkQsTUFEeEIsQ0FDTEMsU0FESyxFQUNNQyxNQUROLEdBQ3dCRixNQUR4QixDQUNNRSxNQUROLEVBQ2NDLEtBRGQsR0FDd0JILE1BRHhCLENBQ2NHLEtBRGQ7QUFHUEMsWUFBQUEsUUFITyxHQUdJRixNQUFNLENBQUNHLElBQVAsQ0FBWSxVQUFBQyxLQUFLO0FBQUEscUJBQUlBLEtBQUssQ0FBQ0MsSUFBTixLQUFlLEtBQW5CO0FBQUEsYUFBakIsQ0FISjtBQUlQQyxZQUFBQSxLQUpPLEdBSUNKLFFBQVEsQ0FBQ0ssVUFKVjtBQU1QQyxZQUFBQSxpQkFOTztBQVNQQyxZQUFBQSxrQkFUTyxHQVNjLEVBVGQ7QUFXUEMsWUFBQUEsbUJBWE8sNFBBcUJiWCxTQUFTLENBQ05ZLEdBREgsQ0FDTyxVQUFDQyxRQUFELEVBQVdDLEtBQVgsRUFBcUI7QUFDeEIsa0JBQU1DLFlBQVksR0FBR1QsY0FBS1UsUUFBTCxDQUNuQmQsS0FBSyxDQUFDZSxJQURhLEVBRW5CWCxjQUFLWSxPQUFMLENBQWFoQixLQUFLLENBQUNpQixJQUFuQixFQUF5Qk4sUUFBekIsQ0FGbUIsQ0FBckI7O0FBSUEsdUNBQWtCQyxLQUFsQixrQ0FBK0Msb0JBQzdDQyxZQUQ2QyxDQUEvQztBQUdELGFBVEgsRUFVR0ssSUFWSCxDQVVRLElBVlIsQ0FyQmE7QUFrQ1BDLFlBQUFBLG9CQWxDTyxHQWtDZ0JyQixTQUFTLENBQ25DWSxHQUQwQixDQUN0QixVQUFDQyxRQUFELEVBQVdDLEtBQVgsRUFBcUI7QUFDeEIsa0JBQU1DLFlBQVksR0FBR1QsY0FBS1UsUUFBTCxDQUNuQmQsS0FBSyxDQUFDZSxJQURhLEVBRW5CWCxjQUFLWSxPQUFMLENBQWFoQixLQUFLLENBQUNpQixJQUFuQixFQUF5Qk4sUUFBekIsQ0FGbUIsQ0FBckI7O0FBSUEsd0NBQW1CQyxLQUFuQixvQkFBa0Msb0JBQU1DLFlBQU4sQ0FBbEM7QUFDRCxhQVAwQixFQVExQkssSUFSMEIsQ0FRckIsSUFScUIsQ0FsQ2hCO0FBNENQRSxZQUFBQSxJQTVDTyw2SUFpRFhDLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUFaLEtBQXlCLFlBQXpCLEdBQ0loQixpQkFESixHQUVJQyxrQkFuRE8saUJBdURYYSxPQUFPLENBQUNDLEdBQVIsQ0FBWUMsUUFBWixLQUF5QixZQUF6QixHQUNJZCxtQkFESixHQUVJVSxvQkF6RE8sd0dBOERYckIsU0FBUyxDQUFDWSxHQUFWLENBQWMsVUFBQ0MsUUFBRCxFQUFXQyxLQUFYO0FBQUEsaUNBQTBCQSxLQUExQjtBQUFBLGFBQWQsRUFBaURNLElBQWpELENBQXNELEtBQXRELENBOURXLDJEQWtFSmIsS0FsRUksc3JCQTRGVGdCLE9BQU8sQ0FBQ0MsR0FBUixDQUFZQyxRQUFaLEtBQXlCLFlBQXpCLCtFQUdFekIsU0FBUyxDQUNSWSxHQURELENBQ0ssVUFBQ0MsUUFBRCxFQUFXQyxLQUFYLEVBQXFCO0FBQ3hCLGtCQUFNQyxZQUFZLEdBQUdULGNBQUtVLFFBQUwsQ0FDbkJkLEtBQUssQ0FBQ2UsSUFEYSxFQUVuQlgsY0FBS1ksT0FBTCxDQUFhaEIsS0FBSyxDQUFDaUIsSUFBbkIsRUFBeUJOLFFBQXpCLENBRm1CLENBQXJCOztBQUlBLGtEQUE2QixvQkFBTUUsWUFBTixDQUE3QixtRUFDa0NELEtBRGxDLDBCQUN1RCxvQkFDckRDLFlBRHFELENBRHZEO0FBTUQsYUFaRCxFQWFDSyxJQWJELENBYU0sSUFiTixDQUhGLG1CQW1CSSxFQS9HSztBQXFLUE0sWUFBQUEsaUJBcktPLEdBcUthcEIsY0FBS2MsSUFBTCxDQUFVbEIsS0FBSyxDQUFDZSxJQUFoQixFQUFzQix3QkFBdEIsQ0FyS2I7QUFBQTtBQUFBLG1CQXNLUFUsaUJBQUdDLE1BQUgsQ0FBVUYsaUJBQVYsQ0F0S087O0FBQUE7QUFBQTtBQUFBLG1CQXVLUEMsaUJBQUdFLFVBQUgsQ0FBY0gsaUJBQWQsRUFBaUNKLElBQWpDLENBdktPOztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tICdwYXRoJ1xuaW1wb3J0IHNsYXNoIGZyb20gJ3NsYXNoJ1xuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJ1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoeyBjb25maWcgfSkgPT4ge1xuICBjb25zdCB7IHRlbXBsYXRlcywgcm91dGVzLCBwYXRocyB9ID0gY29uZmlnXG5cbiAgY29uc3Qgcm91dGU0MDQgPSByb3V0ZXMuZmluZChyb3V0ZSA9PiByb3V0ZS5wYXRoID09PSAnNDA0JylcbiAgY29uc3QgaWQ0MDQgPSByb3V0ZTQwNC50ZW1wbGF0ZUlEXG5cbiAgY29uc3QgcHJvZHVjdGlvbkltcG9ydHMgPSBgXG5pbXBvcnQgdW5pdmVyc2FsLCB7IHNldEhhc0JhYmVsUGx1Z2luIH0gZnJvbSAncmVhY3QtdW5pdmVyc2FsLWNvbXBvbmVudCdcbiAgYFxuICBjb25zdCBkZXZlbG9wbWVudEltcG9ydHMgPSAnJ1xuXG4gIGNvbnN0IHByb2R1Y3Rpb25UZW1wbGF0ZXMgPSBgXG5cbmNvbnN0IHVuaXZlcnNhbE9wdGlvbnMgPSB7XG4gIGxvYWRpbmc6ICgpID0+IG51bGwsXG4gIGVycm9yOiBwcm9wcyA9PiB7XG4gICAgY29uc29sZS5lcnJvcihwcm9wcy5lcnJvcik7XG4gICAgcmV0dXJuIDxkaXY+QW4gZXJyb3Igb2NjdXJyZWQgbG9hZGluZyB0aGlzIHBhZ2UncyB0ZW1wbGF0ZS4gTW9yZSBpbmZvcm1hdGlvbiBpcyBhdmFpbGFibGUgaW4gdGhlIGNvbnNvbGUuPC9kaXY+O1xuICB9LFxufVxuXG4ke3RlbXBsYXRlc1xuICAgIC5tYXAoKHRlbXBsYXRlLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgdGVtcGxhdGVQYXRoID0gcGF0aC5yZWxhdGl2ZShcbiAgICAgICAgcGF0aHMuRElTVCxcbiAgICAgICAgcGF0aC5yZXNvbHZlKHBhdGhzLlJPT1QsIHRlbXBsYXRlKVxuICAgICAgKVxuICAgICAgcmV0dXJuIGBjb25zdCB0XyR7aW5kZXh9ID0gdW5pdmVyc2FsKGltcG9ydCgnJHtzbGFzaChcbiAgICAgICAgdGVtcGxhdGVQYXRoXG4gICAgICApfScpLCB1bml2ZXJzYWxPcHRpb25zKWBcbiAgICB9KVxuICAgIC5qb2luKCdcXG4nKX1cbmBcblxuICBjb25zdCBkZXZlbG9wbWVudFRlbXBsYXRlcyA9IHRlbXBsYXRlc1xuICAgIC5tYXAoKHRlbXBsYXRlLCBpbmRleCkgPT4ge1xuICAgICAgY29uc3QgdGVtcGxhdGVQYXRoID0gcGF0aC5yZWxhdGl2ZShcbiAgICAgICAgcGF0aHMuRElTVCxcbiAgICAgICAgcGF0aC5yZXNvbHZlKHBhdGhzLlJPT1QsIHRlbXBsYXRlKVxuICAgICAgKVxuICAgICAgcmV0dXJuIGBpbXBvcnQgdF8ke2luZGV4fSBmcm9tICcke3NsYXNoKHRlbXBsYXRlUGF0aCl9J2BcbiAgICB9KVxuICAgIC5qb2luKCdcXG4nKVxuXG4gIGNvbnN0IGZpbGUgPSBgXG5pbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBSb3V0ZSB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXG5pbXBvcnQgeyBjbGVhblBhdGggfSBmcm9tICdyZWFjdC1zdGF0aWMnXG4ke1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbidcbiAgICAgID8gcHJvZHVjdGlvbkltcG9ydHNcbiAgICAgIDogZGV2ZWxvcG1lbnRJbXBvcnRzXG4gIH1cblxuJHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nXG4gICAgICA/IHByb2R1Y3Rpb25UZW1wbGF0ZXNcbiAgICAgIDogZGV2ZWxvcG1lbnRUZW1wbGF0ZXNcbiAgfVxuXG4vLyBUZW1wbGF0ZSBNYXBcbmdsb2JhbC5jb21wb25lbnRzQnlUZW1wbGF0ZUlEID0gZ2xvYmFsLmNvbXBvbmVudHNCeVRlbXBsYXRlSUQgfHwgW1xuICAke3RlbXBsYXRlcy5tYXAoKHRlbXBsYXRlLCBpbmRleCkgPT4gYHRfJHtpbmRleH1gKS5qb2luKCcsXFxuJyl9XG5dXG5cbmNvbnN0IGRlZmF1bHRUZW1wbGF0ZUlEcyA9IHtcbiAgJzQwNCc6ICR7aWQ0MDR9XG59XG5cbi8vIFRlbXBsYXRlIFRyZWVcbmdsb2JhbC50ZW1wbGF0ZUlEc0J5UGF0aCA9IGdsb2JhbC50ZW1wbGF0ZUlEc0J5UGF0aCB8fCBkZWZhdWx0VGVtcGxhdGVJRHNcblxuLy8gR2V0IHRlbXBsYXRlIGZvciBnaXZlbiBwYXRoXG5jb25zdCBnZXRDb21wb25lbnRGb3JQYXRoID0gcGF0aCA9PiB7XG4gIHBhdGggPSBjbGVhblBhdGgocGF0aClcbiAgcmV0dXJuIGdsb2JhbC5jb21wb25lbnRzQnlUZW1wbGF0ZUlEW2dsb2JhbC50ZW1wbGF0ZUlEc0J5UGF0aFtwYXRoXV1cbn1cblxuZ2xvYmFsLnJlYWN0U3RhdGljR2V0Q29tcG9uZW50Rm9yUGF0aCA9IGdldENvbXBvbmVudEZvclBhdGhcbmdsb2JhbC5yZWFjdFN0YXRpY1JlZ2lzdGVyVGVtcGxhdGVJREZvclBhdGggPSAocGF0aCwgaWQpID0+IHtcbiAgZ2xvYmFsLnRlbXBsYXRlSURzQnlQYXRoW3BhdGhdID0gaWRcbn1cbmdsb2JhbC5jbGVhclRlbXBsYXRlSURzID0gKCkgPT4ge1xuICBnbG9iYWwudGVtcGxhdGVJRHNCeVBhdGggPSBkZWZhdWx0VGVtcGxhdGVJRHNcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm91dGVzIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgY29tcG9uZW50RGlkTW91bnQgKCkge1xuICAgIGdsb2JhbC5jbGVhclRlbXBsYXRlSURzID0gKCkgPT4ge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7fSlcbiAgICB9XG4gICAgJHtcbiAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbidcbiAgICAgICAgPyBgXG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmhvdCkge1xuICAgICAgJHt0ZW1wbGF0ZXNcbiAgICAgICAgLm1hcCgodGVtcGxhdGUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgY29uc3QgdGVtcGxhdGVQYXRoID0gcGF0aC5yZWxhdGl2ZShcbiAgICAgICAgICAgIHBhdGhzLkRJU1QsXG4gICAgICAgICAgICBwYXRoLnJlc29sdmUocGF0aHMuUk9PVCwgdGVtcGxhdGUpXG4gICAgICAgICAgKVxuICAgICAgICAgIHJldHVybiBgbW9kdWxlLmhvdC5hY2NlcHQoJyR7c2xhc2godGVtcGxhdGVQYXRoKX0nLCAoKSA9PiB7XG4gICAgICAgICAgICBnbG9iYWwuY29tcG9uZW50c0J5VGVtcGxhdGVJRFske2luZGV4fV0gPSByZXF1aXJlKCcke3NsYXNoKFxuICAgICAgICAgICAgdGVtcGxhdGVQYXRoXG4gICAgICAgICAgKX0nKS5kZWZhdWx0XG4gICAgICAgICAgICB0aGlzLmZvcmNlVXBkYXRlKClcbiAgICAgICAgICB9KWBcbiAgICAgICAgfSlcbiAgICAgICAgLmpvaW4oJ1xcbicpfVxuICAgICAgfVxuYFxuICAgICAgICA6ICcnXG4gICAgfVxuXG4gIH1cbiAgcmVuZGVyICgpIHtcbiAgICBjb25zdCB7IGNvbXBvbmVudDogQ29tcCwgcmVuZGVyLCBjaGlsZHJlbiB9ID0gdGhpcy5wcm9wc1xuXG4gICAgY29uc3QgZ2V0RnVsbENvbXBvbmVudEZvclBhdGggPSBwYXRoID0+IHtcbiAgICAgIGxldCBDb21wID0gZ2V0Q29tcG9uZW50Rm9yUGF0aChwYXRoKVxuICAgICAgbGV0IGlzNDA0ID0gcGF0aCA9PT0gJzQwNCdcbiAgICAgIGlmICghQ29tcCkge1xuICAgICAgICBpczQwNCA9IHRydWVcbiAgICAgICAgQ29tcCA9IGdldENvbXBvbmVudEZvclBhdGgoJy80MDQnKVxuICAgICAgfVxuICAgICAgcmV0dXJuIChuZXdQcm9wcyA9IHt9KSA9PiAoXG4gICAgICAgIENvbXBcbiAgICAgICAgICA/IDxDb21wIHsuLi5uZXdQcm9wc30gey4uLihpczQwNCA/IHtwYXRoOiAnNDA0J30gOiB7fSl9IC8+XG4gICAgICAgICAgOiBudWxsXG4gICAgICApXG4gICAgfVxuXG4gICAgY29uc3QgcmVuZGVyUHJvcHMgPSB7XG4gICAgICBjb21wb25lbnRzQnlUZW1wbGF0ZUlEOiBnbG9iYWwuY29tcG9uZW50c0J5VGVtcGxhdGVJRCxcbiAgICAgIHRlbXBsYXRlSURzQnlQYXRoOiBnbG9iYWwudGVtcGxhdGVJRHNCeVBhdGgsXG4gICAgICBnZXRDb21wb25lbnRGb3JQYXRoOiBnZXRGdWxsQ29tcG9uZW50Rm9yUGF0aFxuICAgIH1cblxuICAgIGlmIChDb21wKSB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8Q29tcFxuICAgICAgICAgIHsuLi5yZW5kZXJQcm9wc31cbiAgICAgICAgLz5cbiAgICAgIClcbiAgICB9XG5cbiAgICBpZiAocmVuZGVyIHx8IGNoaWxkcmVuKSB7XG4gICAgICByZXR1cm4gKHJlbmRlciB8fCBjaGlsZHJlbikocmVuZGVyUHJvcHMpXG4gICAgfVxuXG4gICAgLy8gVGhpcyBpcyB0aGUgZGVmYXVsdCBhdXRvLXJvdXRpbmcgcmVuZGVyZXJcbiAgICByZXR1cm4gKFxuICAgICAgPFJvdXRlIHJlbmRlcj17cHJvcHMgPT4ge1xuICAgICAgICBsZXQgQ29tcCA9IGdldEZ1bGxDb21wb25lbnRGb3JQYXRoKHByb3BzLmxvY2F0aW9uLnBhdGhuYW1lKVxuICAgICAgICAvLyBJZiBDb21wIGlzIHVzZWQgYXMgYSBjb21wb25lbnQgaGVyZSwgaXQgdHJpZ2dlcnMgUmVhY3QgdG8gcmUtbW91bnQgdGhlIGVudGlyZVxuICAgICAgICAvLyBjb21wb25lbnQgdHJlZSB1bmRlcm5lYXRoIGR1cmluZyByZWNvbmNpbGlhdGlvbiwgbG9zaW5nIGFsbCBpbnRlcm5hbCBzdGF0ZS5cbiAgICAgICAgLy8gQnkgdW53cmFwcGluZyBpdCBoZXJlIHdlIGtlZXAgdGhlIHJlYWwsIHN0YXRpYyBjb21wb25lbnQgZXhwb3NlZCBkaXJlY3RseSB0byBSZWFjdC5cbiAgICAgICAgcmV0dXJuIENvbXAgJiYgQ29tcCgpXG4gICAgICB9fSAvPlxuICAgIClcbiAgfVxufVxuXG5gXG5cbiAgY29uc3QgZHluYW1pY1JvdXRlc1BhdGggPSBwYXRoLmpvaW4ocGF0aHMuRElTVCwgJ3JlYWN0LXN0YXRpYy1yb3V0ZXMuanMnKVxuICBhd2FpdCBmcy5yZW1vdmUoZHluYW1pY1JvdXRlc1BhdGgpXG4gIGF3YWl0IGZzLm91dHB1dEZpbGUoZHluYW1pY1JvdXRlc1BhdGgsIGZpbGUpXG59XG4iXX0=