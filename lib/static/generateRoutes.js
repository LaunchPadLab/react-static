"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _path = _interopRequireDefault(require("path"));

var _slash = _interopRequireDefault(require("slash"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(_ref) {
    var config, templates, routes, paths, route404, id404, productionImports, developmentImports, productionTemplates, developmentTemplates, file, dynamicRoutesPath;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            config = _ref.config;
            templates = config.templates, routes = config.routes, paths = config.paths;
            route404 = routes.find(function (route) {
              return route.path === '404';
            });
            id404 = route404.templateID;
            productionImports = "\nimport universal, { setHasBabelPlugin } from 'react-universal-component'\n  ";
            developmentImports = '';
            productionTemplates = "\n\nconst universalOptions = {\n  loading: () => null,\n  error: props => {\n    console.error(props.error);\n    return <div>An error occurred loading this page's template. More information is available in the console.</div>;\n  },\n}\n\n".concat(templates.map(function (template, index) {
              var templatePath = _path.default.relative(paths.DIST, _path.default.resolve(paths.ROOT, template));

              return "const t_".concat(index, " = require('").concat((0, _slash.default)(templatePath), "').default");
            }).join('\n'), "\n");
            developmentTemplates = templates.map(function (template, index) {
              var templatePath = _path.default.relative(paths.DIST, _path.default.resolve(paths.ROOT, template));

              return "import t_".concat(index, " from '").concat((0, _slash.default)(templatePath), "'");
            }).join('\n');
            file = "\nimport React, { Component } from 'react'\nimport { Route } from 'react-router-dom'\nimport { cleanPath } from 'react-static'\n".concat(process.env.NODE_ENV === 'production' ? productionImports : developmentImports, "\n\n").concat(process.env.NODE_ENV === 'production' ? productionTemplates : developmentTemplates, "\n\n// Template Map\nglobal.componentsByTemplateID = global.componentsByTemplateID || [\n  ").concat(templates.map(function (template, index) {
              return "t_".concat(index);
            }).join(',\n'), "\n]\n\nconst defaultTemplateIDs = {\n  '404': ").concat(id404, "\n}\n\n// Template Tree\nglobal.templateIDsByPath = global.templateIDsByPath || defaultTemplateIDs\n\n// Get template for given path\nconst getComponentForPath = path => {\n  path = cleanPath(path)\n  return global.componentsByTemplateID[global.templateIDsByPath[path]]\n}\n\nglobal.reactStaticGetComponentForPath = getComponentForPath\nglobal.reactStaticRegisterTemplateIDForPath = (path, id) => {\n  global.templateIDsByPath[path] = id\n}\nglobal.clearTemplateIDs = () => {\n  global.templateIDsByPath = defaultTemplateIDs\n}\n\nexport default class Routes extends Component {\n  componentDidMount () {\n    global.clearTemplateIDs = () => {\n      this.setState({})\n    }\n    ").concat(process.env.NODE_ENV !== 'production' ? "\n    if (typeof document !== 'undefined' && module.hot) {\n      ".concat(templates.map(function (template, index) {
              var templatePath = _path.default.relative(paths.DIST, _path.default.resolve(paths.ROOT, template));

              return "module.hot.accept('".concat((0, _slash.default)(templatePath), "', () => {\n            global.componentsByTemplateID[").concat(index, "] = require('").concat((0, _slash.default)(templatePath), "').default\n            this.forceUpdate()\n          })");
            }).join('\n'), "\n      }\n") : '', "\n\n  }\n  render () {\n    const { component: Comp, render, children } = this.props\n\n    const getFullComponentForPath = path => {\n      let Comp = getComponentForPath(path)\n      let is404 = path === '404'\n      if (!Comp) {\n        is404 = true\n        Comp = getComponentForPath('/404')\n      }\n      return (newProps = {}) => (\n        Comp\n          ? <Comp {...newProps} {...(is404 ? {path: '404'} : {})} />\n          : null\n      )\n    }\n\n    const renderProps = {\n      componentsByTemplateID: global.componentsByTemplateID,\n      templateIDsByPath: global.templateIDsByPath,\n      getComponentForPath: getFullComponentForPath\n    }\n\n    if (Comp) {\n      return (\n        <Comp\n          {...renderProps}\n        />\n      )\n    }\n\n    if (render || children) {\n      return (render || children)(renderProps)\n    }\n\n    // This is the default auto-routing renderer\n    return (\n      <Route render={props => {\n        let Comp = getFullComponentForPath(props.location.pathname)\n        // If Comp is used as a component here, it triggers React to re-mount the entire\n        // component tree underneath during reconciliation, losing all internal state.\n        // By unwrapping it here we keep the real, static component exposed directly to React.\n        return Comp && Comp()\n      }} />\n    )\n  }\n}\n\n");
            dynamicRoutesPath = _path.default.join(paths.DIST, 'react-static-routes.js');
            _context.next = 12;
            return _fsExtra.default.remove(dynamicRoutesPath);

          case 12:
            _context.next = 14;
            return _fsExtra.default.outputFile(dynamicRoutesPath, file);

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,