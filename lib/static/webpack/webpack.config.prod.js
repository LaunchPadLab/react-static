"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _webpack = _interopRequireDefault(require("webpack"));

var _path = _interopRequireDefault(require("path"));

var _caseSensitivePathsWebpackPlugin = _interopRequireDefault(require("case-sensitive-paths-webpack-plugin"));

var _webpackBundleAnalyzer = require("webpack-bundle-analyzer");

var _uglifyjsWebpackPlugin = _interopRequireDefault(require("uglifyjs-webpack-plugin"));

var _webpackNodeExternals = _interopRequireDefault(require("webpack-node-externals"));

var _extractCssChunksWebpackPlugin = _interopRequireDefault(require("extract-css-chunks-webpack-plugin"));

var _optimizeCssAssetsWebpackPlugin = _interopRequireDefault(require("optimize-css-assets-webpack-plugin"));

var _rules = _interopRequireDefault(require("./rules"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function common(config) {
  var _config$paths = config.paths,
      ROOT = _config$paths.ROOT,
      DIST = _config$paths.DIST,
      NODE_MODULES = _config$paths.NODE_MODULES,
      SRC = _config$paths.SRC,
      ASSETS = _config$paths.ASSETS;
  process.env.REACT_STATIC_SITE_ROOT = config.siteRoot;
  process.env.REACT_STATIC_BASE_PATH = config.basePath;
  process.env.REACT_STATIC_PUBLIC_PATH = config.publicPath;
  process.env.REACT_STATIC_ASSETS_PATH = config.assetsPath;
  var splitChunks = {
    chunks: 'all',
    minSize: 10000,
    minChunks: 1,
    maxAsyncRequests: 5,
    maxInitialRequests: 5,
    automaticNameDelimiter: '~',
    name: true,
    cacheGroups: {
      vendors: {
        test: /[\\/]node_modules[\\/]/,
        priority: -10,
        chunks: 'all'
      },
      default: {
        minChunks: 2,
        priority: -20,
        reuseExistingChunk: true
      }
    }
  };
  var extrackCSSChunks = new _extractCssChunksWebpackPlugin.default({
    filename: '[name].[chunkHash:8].css',
    chunkFilename: '[id].[chunkHash:8].css'
  });

  if (!config.extractCssChunks) {
    splitChunks.cacheGroups = {
      styles: {
        name: 'styles',
        test: /\.css$/,
        chunks: 'all',
        enforce: true
      }
    };
    extrackCSSChunks = new _extractCssChunksWebpackPlugin.default({
      filename: '[name].[chunkHash:8].css'
    });
  }

  return {
    mode: 'production',
    context: _path.default.resolve(__dirname, '../../../node_modules'),
    entry: _path.default.resolve(ROOT, config.entry),
    output: {
      filename: '[name].[hash:8].js',
      // dont use chunkhash, its not a chunk
      chunkFilename: 'templates/[name].[chunkHash:8].js',
      path: ASSETS,
      publicPath: process.env.REACT_STATIC_ASSETS_PATH || '/'
    },
    optimization: {
      minimize: true,
      minimizer: [new _uglifyjsWebpackPlugin.default({
        cache: true,
        parallel: true,
        sourceMap: true // set to true if you want JS source maps

      }), new _optimizeCssAssetsWebpackPlugin.default({})],
      splitChunks: splitChunks
    },
    module: {
      rules: (0, _rules.default)({
        config: config,
        stage: 'prod',
        isNode: false
      })
    },
    resolve: {
      modules: [SRC, NODE_MODULES, 'node_modules', _path.default.resolve(__dirname, '../../../node_modules'), DIST],
      mainFields: ['browser', 'main'],
      extensions: ['.js', '.json', '.jsx']
    },
    externals: [],
    target: undefined,
    plugins: [new _webpack.default.EnvironmentPlugin(process.env), extrackCSSChunks, new _caseSensitivePathsWebpackPlugin.default(), config.bundleAnalyzer && new _webpackBundleAnalyzer.BundleAnalyzerPlugin()].filter(function (d) {
      return d;
    }),
    devtool: 'source-map'
  };
}

function _default(_ref) {
  var config = _ref.config,
      isNode = _ref.isNode;
  var result = common(config);
  if (!isNode) return result;
  result.output.filename = 'static.[chunkHash:8].js';
  result.output.libraryTarget = 'umd';
  result.optimization.minimize = false;
  result.optimization.minimizer = [];
  result.target = 'node';
  result.externals = [(0, _webpackNodeExternals.default)({
    whitelist: ['react-universal-component', 'webpack-flush-chunks', 'react-static-routes']
  })]; //
  // module.rules

  result.module.rules = (0, _rules.default)({
    config: config,
    stage: 'prod',
    isNode: true
  });
  result.plugins = [new _webpack.default.EnvironmentPlugin(process.env), new _caseSensitivePathsWebpackPlugin.default(), new _webpack.default.optimize.LimitChunkCountPlugin({
    maxChunks: 1
  })];
  return result;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,